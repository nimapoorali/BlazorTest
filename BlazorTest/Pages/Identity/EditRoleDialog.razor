@inject IRoleService roleService
@inject ISnackbar Snackbar;

<MudDialog DefaultFocus="DefaultFocus.FirstChild">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(editing?Icons.Material.Outlined.Edit:Icons.Material.Outlined.Create)" Color="Color.Primary" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="formIsValid" Model="Role" Disabled="saving" @ref="form">
            <MudTextField @bind-Value="Role.Title" For="@(() => Role.Title)" Required="true" Immediate="true" Label="Title" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="Role.GroupTitle" For="@(() => Role.GroupTitle)" Required="true" Immediate="true" Label="Group Title" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            @*<MudSwitch @bind-Checked="role.ActivityState" Color="role.ActivityState=="Active"?Color.Success:Color.Default"></MudSwitch>*@
            <MudRadioGroup @bind-SelectedOption="Role.ActivityState">
                <MudRadio Option="@("Active")" Color="Color.Success">Active</MudRadio>
                <MudRadio Option="@("Deactive")" Color="Color.Error">Deactive</MudRadio>
                <MudRadio Option="@("Suspend")">Suspend</MudRadio>
            </MudRadioGroup>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="@Color.Success" Variant="Variant.Filled" OnClick="Save" Disabled="!formIsValid">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private MudForm? form;
    private bool editing;
    private bool saving;
    bool formIsValid;

    [Parameter]
    public Role? Role { get; set; }


    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        editing = Role is null ? false : Role.Id != Guid.Empty;
    }

    async Task Save()
    {
        try
        {
            saving = true;
            await roleService.SaveRole(Role!);
            Snackbar.Add(editing ? "Role Edited." : "Role Added.", MudBlazor.Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (ApiCallException ex)
        {
            foreach (var item in ex.ErrorMessages)
            {
                Snackbar.Add("Operation failed: " + item, MudBlazor.Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Unexpected error: " + ex.Message, MudBlazor.Severity.Error);
        }

        saving = false;
        form!.ResetValidation();
    }
}