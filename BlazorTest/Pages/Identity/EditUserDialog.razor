@inject IUserService userService
@inject ISnackbar Snackbar;

<MudDialog DefaultFocus="DefaultFocus.FirstChild">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(editing?Icons.Material.Outlined.Edit:Icons.Material.Outlined.Create)" Color="Color.Primary" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="formIsValid" Model="User" Disabled="saving" @ref="form">
            @if (editing)
            {
                <div class="d-flex align-center">
                    <span class="me-2">Username: </span>
                    <MudText Typo="Typo.h6">@User?.Username</MudText>
                </div>

            }
            else
            {
                <MudTextField @bind-Value="User.Username" For="@(() => User.Username)" Required="true" Immediate="true" Label="Username" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            }
            <MudTextField @bind-Value="User.FirstName" For="@(() => User.FirstName)" Label="First Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="User.LastName" For="@(() => User.LastName)" Label="Last Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="User.NickName" For="@(() => User.NickName)" Label="Nick Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudRadioGroup @bind-SelectedOption="User.ActivityState">
                <MudRadio Option="@("Active")" Color="Color.Success">Active</MudRadio>
                <MudRadio Option="@("Deactive")" Color="Color.Error">Deactive</MudRadio>
                <MudRadio Option="@("Suspend")">Suspend</MudRadio>
            </MudRadioGroup>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="@Color.Success" Variant="Variant.Filled" OnClick="Save" Disabled="!formIsValid">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private MudForm? form;
    private bool editing;
    private bool saving;
    bool formIsValid;

    [Parameter]
    public User? User { get; set; }


    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        editing = User is null ? false : User.Id != Guid.Empty;
    }

    async Task Save()
    {
        try
        {
            saving = true;
            await userService.SaveUser(User!);
            Snackbar.Add(editing ? "User Edited." : "User Added.", MudBlazor.Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (ApiCallException ex)
        {
            foreach (var item in ex.ErrorMessages)
            {
                Snackbar.Add(
    @<div>
        <h3>Warning</h3>
        <ul>
            @foreach (var errorMessage in (ex as ApiCallException).ErrorMessages)
            {
                <li>@errorMessage</li>
            }
        </ul>
    </div>
        , Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(
    @<div>
        <h3>Error</h3>
        <ul>
            <li>@ex.Message</li>
            <li>@ex.InnerException?.Message</li>
        </ul>
    </div>
    , Severity.Error);
        }

        saving = false;
        form!.ResetValidation();
    }
}